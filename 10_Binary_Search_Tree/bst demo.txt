#include <iostream>

using namespace std;

class Node
{
public:
    Node *lchild;
    int data;
    Node *rchild;

    Node(int data)
    {
        this->data = data;
        lchild = rchild = NULL;
    }
};

Node *root = NULL;

void InsertNode(int key)
{
    // p pointer points to root
    // q is tail pointer following to p
    // t is pointer for creating new node

    Node *p = root;
    Node *q, *t;

    if(p == NULL)
    {
        t = new Node(key);
        root = t;
        return;
    }

    while(p != NULL)
    {
        q = p;
        if(key == p->data)
            return;
        else if(key < p->data)
            p = p->lchild ;
        else
            p = p->rchild;
    }

    // After loop p will became NULL and q will points to location where we have to insert
    t = new Node(key);

    if(key < q->data)
        q->lchild = t;
    else
        q->rchild = t;

}

// Inorder traversal results is sorted order
void Inorder(Node *p)
{
    if(p == NULL) return;

    Inorder(p->lchild);
    cout<<p->data<<" ";
    Inorder(p->rchild);
}



int main()
{
//    Node *root = NULL;

    InsertNode(10);
    InsertNode( 5);
    InsertNode( 20);
    InsertNode( 8);
    InsertNode( 30);

    Inorder(root);


    return 0;
}

//*******************
#include <iostream>

using namespace std;

class Node
{
public:
    int data;
    Node *lchild;
    Node *rchild;

    Node(int data)
    {
        this->data = data;
        lchild = rchild = NULL;
    }
};

Node *root = NULL;

void InsertNode(Node *p, int key)
{
    // p pointer points to root
    // q is tail pointer following to p
    // t is pointer for creating new node

    Node *q = NULL, *t;

    if(p == NULL)
    {
        t = new Node(key);
        root = t;
        return;
    }

    while(p != NULL)
    {
        q = p;
        if(key == p->data)
            return;
        else if(key < p->data)
            p = p->lchild ;
        else
            p = p->rchild;
    }

    // After loop p will became NULL and q will points to location where we have to insert
    t = new Node(key);

    if(key < q->data)
        q->lchild = t;
    else
        q->rchild = t;

}

// Inorder traversal results is sorted order
void Inorder(Node *p)
{
    if(p == NULL)
        return;

    Inorder(p->lchild);
    cout<<p->data<<" ";
    Inorder(p->rchild);
}



int main()
{

    InsertNode(root, 10);
    InsertNode(root, 5);
    InsertNode(root, 20);
    InsertNode(root, 8);
    InsertNode(root, 30);

    Inorder(root);


    return 0;
}

